import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.commons.io.output.NullOutputStream

// Establish version and status
ext.githubProjectName = rootProject.name 
description = 'JPA DAO Example'

def schemaTargetDir = file('build/generated-sources')

buildscript {
	repositories {
		maven { url "http://www.datanucleus.org/downloads/maven2/" } // datanucleus
		mavenCentral()
		maven { url "http://www.eviware.com/repository/maven2/" } // for SoapUI
		maven { url "http://repo1.maven.org/maven2/" } // for testng 		
				
	}

	dependencies {
		classpath 'org.gradle.api.plugins:gradle-cargo-plugin:0.6'

		// SOAP UI
		classpath ('eviware:maven-soapui-plugin:4.5.1'){
			exclude group: "jtidy", module: "jtidy"
			exclude group: "javax.jms", module: "jms"
		}
		classpath 'net.sf.jtidy:jtidy:r938'               //override the java 1.5 transient dependency
		classpath 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1' // replacement for javax.jms
        classpath 'commons-io:commons-io:2.4'
	}
}


repositories {
	maven { url "http://www.datanucleus.org/downloads/maven2/" } // datanucleus
	maven { url "http://10.0.24.241:8000/nexus/content/repositories/thirdparty/" } // oracle TODO add this to local repo	
	maven { url "http://repo1.maven.org/maven2/" } // for testng
	
	}


apply plugin: 'war'
apply plugin: 'cargo'
apply plugin: 'jetty'

configurations {
	//Need for enhancering via datanucleus.
	jdo {
		extendsFrom compile
	}
	
	xjc //WTF Is this?? -jer
}
   

dependencies {
	
	// ************************************* beg cargo *********************************************
	cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
			"org.codehaus.cargo:cargo-ant:$cargoVersion"
	// ************************************* end cargo *********************************************

	// ************************************* beg xjc *********************************************
	xjc group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.2.4-1'
	// ************************************* end xjc *********************************************

	
	compile fileTree(dir: 'lib', include: 'asm*.jar')



	//DataNucleus
//	compile fileTree(dir: 'lib', include: 'datanucleus-*.jar') // DataNucleus JPA if retrieving from repo doesn't fly
	compile 'org.datanucleus:datanucleus-api-jdo:3.2.1@jar'
	compile 'org.datanucleus:datanucleus-api-jpa:3.2.1@jar'
	compile 'org.datanucleus:datanucleus-core:3.2.2@jar'
    compile 'org.datanucleus:datanucleus-maven-plugin:3.2.0-release@jar'
	compile 'org.datanucleus:datanucleus-rdbms:3.2.1@jar'

	
	
		
	//H2
//	compile "com.h2database:h2:1.3.168"
	
//	// geronimo jpa spec
	compile 'org.apache.geronimo.specs:geronimo-jpa_2.0_spec:1.1'

	
//	//JAX JDO API
	compile "javax.jdo:jdo-api:3.0"

	
//	//Oracle OJDBC
	compile 'com.oracle:ojdbc6:11g-11.2.0.3.0'
	compile 'com.oracle:ucp:11g-11.2.0.3.0'
	


// Tomcat
	compile "org.apache.tomcat:tomcat-servlet-api:${tomcatVersion}"

	
//  LOG4J
	compile "log4j:log4j:${log4JVersion}"

// APACHE COMMONS
	compile 'org.apache.commons:commons-lang3:3.1'

	
// JACKSON 1.9.x (2.x would supplant these w/ different name spaces)
//	compile "org.codehaus.jackson:jackson-core-asl:${jacksonVersion}"
//	compile "org.codehaus.jackson:jackson-mapper-asl:${jacksonVersion}"
//	compile "org.codehaus.jackson:jackson-jaxrs:${jacksonVersion}"
//	compile "org.codehaus.jackson:jackson-xc:${jacksonVersion}"
//	compile "org.codehaus.jackson:jackson-core-lgpl:${jacksonVersion}"
//	compile "org.codehaus.jackson:jackson-mapper-lgpl:${jacksonVersion}"
//	compile "org.codehaus.jackson:jackson-smile:${jacksonVersion}"
//	compile "org.codehaus.jackson:jackson-mrbean:${jacksonVersion}"
//	runtime 'javax.xml.bind:jaxb-api:2.1'


// NETFLIX KARYON
//	compile "com.netflix.karyon:karyon-extensions:${karyonVersion}"
//	compile 'javax.validation:validation-api:1.0.0.GA'
//	runtime 'com.google.code.gson:gson:2.1'
//	runtime 'com.google.guava:guava:11.0.2'
//	runtime 'com.google.inject.extensions:guice-servlet:2.0'
//	runtime 'com.sun.jersey:jersey-core:1.11'
//	runtime 'com.sun.jersey.contribs:jersey-guice:1.8'

// Testing stuff, hamcrest comes first please.
	
	testCompile 'org.hamcrest:hamcrest-all:1.3'
	testCompile 'org.testng:testng:6.8'
	
	
}


task listJars << {
	configurations.compile.each { File file -> println file.name }
}

// typical tomcat cargo settings given but commented out
cargo {
	containerId = 'tomcat7x'
	port = new Integer(tomcatHttpPort)
//	
//	deployable{
//		// NOTE: Override file to make it pick up an existing war instead of that produce by running other tasks
//		//		file = file('target/contivo-conversion-service-0.0.1.war')
//		context = 'jpa-dao-example'
//
//		// uncomment this to wait on a given URL before continuing
//		//        def pingURL = "http://localhost:${tomcatHttpPort}/jaxrs-service/hello/echo/SierraTangoNevada"
//	}
//
//    local {
//// NOTE: uncomment following line to use existing tomcat install
////        homeDir = file('/Library/Tomcat') // TODO should be set from CATALINA_HOME
//        output = file('build/output.log')
//
//		 installer {
//	            installUrl = "http://apache.osuosl.org/tomcat/tomcat-7/v${tomcatVersion}/bin/apache-tomcat-${tomcatVersion}.zip"
//	            downloadDir = file("$buildDir/download") 
//	            extractDir = file("$buildDir/extract")
//	        }
//
//		tomcat {
//			ajpPort = new Integer(tomcatAjpPort)
//		}
//		 
//		if(containerJVMArgs) {
//			jvmArgs = "$containerJVMArgs"		
//		} else {
//			// set contivo paths
//			jvmArgs = "-Dcontivo.runtime.classpath=$buildDir/classpath -Dcontivo.runtime.map.root=$buildDir/../src/test/resources/data"
//
//			jvmArgs += "-XX:-UseSplitVerifier" 	//to support byte code injection
//		}
//		   
//		// if containerDebug, append tomcat debug args to jvm args
//		if(containerDebug) {
//			jvmArgs += " $containerDebugJVMArgs"
//		}
//		
//		logger.info "=====jvmArgs===="
//		logger.info "$jvmArgs"
//
//    }
	
}

def classpathRoot = "$buildDir" + File.separator + "classpath"
task makeClasspathRoot {
	def classPathDir = new File(classpathRoot.toString());
	if (!classPathDir.exists()) {
		classPathDir.mkdirs()
	}
}

test {
	jvmArgs "-XX:-UseSplitVerifier" //to support byte code injection
	description = 'Just unit tests, out of container'
	
//	include '**/TheTest.class' //example of including/running one test
	include '**/*Test.class'
    useTestNG () {
        if (testIncludeGroups) {
            includeGroups "$testIncludeGroups".split()
        }

        if (testExcludeGroups) {
            excludeGroups "$testExcludeGroups".split()
        }
    }
}

// Typical integration target included for reference
//task integrationTest(type: Test, dependsOn: ['test','war']) {
//	logger.info 'Integration Tests'
//	jvmArgs "-XX:-UseSplitVerifier" //to support byte code injection
//	
//	useTestNG()
//	include '**/*IT.class'
//
//	// set a system property for the test JVM(s)
//	systemProperty 'service.url', "http://localhost:${tomcatHttpPort}/jaxrs-service"
//	systemProperty 'archaius.deployment.applicationId', 'jaxrs-service'
//	systemProperty 'archaius.deployment.environment', 'dev'
//	
//	ignoreFailures true
//	
//	doFirst {
//		cargoStartLocal.execute()
//	}
//
//	doLast {
//		if (project.hasProperty('soapuiTest')) {
//			soapUiTest.execute()
//		}
//        
//		logger.info 'Stopping Tomcat server'
//		cargoStopLocal.execute()
//	}
//}

// copies META-INF (including persistence.xml) to classes/main
task copyResources(type: Copy) {
	from "$projectDir/src/main/resources/"
	into "$buildDir/classes/main"
}

task enhance (dependsOn: copyResources) << {

	logger.info("... Enhancing ...");
	
	ant.taskdef(
		name      : 'datanucleusenhancer',
		classpath : project.runtimeClasspath.asPath,
		classname : 'org.datanucleus.enhancer.EnhancerTask'
	)

	ant.datanucleusenhancer(
		classpath   : project.runtimeClasspath.asPath,
		verbose     : true,
		api : "JPA",
		persistenceUnit : "Hello",
		failonerror : true) {
		fileset( dir : "$buildDir/classes/main" ) {	}
	}
}

classes.dependsOn enhance


//task soapUiTest(type: JavaExec) {
//	main = 'com.eviware.soapui.tools.SoapUITestCaseRunner'
//	classpath = buildscript.configurations.classpath
//	args '-j', '-a', '-r', '-I', "-f$buildDir/test-results", "$buildDir/../src/test/resources/Conversion-soapui-project.xml"
//	workingDir "$buildDir/test-results"
//	standardOutput new NullOutputStream()
//	errorOutput new NullOutputStream()
//}
//
//jettyRun {
//	httpPort = new Integer(jettyHttpPort)
//	reload = 'automatic'
//	scanIntervalSeconds = new Integer(jettyScanIntervalSeconds)
//	daemon = false
//	doFirst {
//		// use the default port of the ws-backend-simulation module
//		System.setProperty('archaius.deployment.applicationId', 'jaxrs-service')
//		System.setProperty('archaius.deployment.environment', 'dev')
//		System.setProperty('service.url', "http://localhost:${tomcatHttpPort}/jaxrs-service")
//	}
//}
//


