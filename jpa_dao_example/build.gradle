import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.commons.io.output.NullOutputStream

// Establish version and status
ext.githubProjectName = rootProject.name 
description = 'JPA DAO Example'

def schemaTargetDir = file('build/generated-sources')

buildscript {
	repositories {
		mavenCentral()
		maven { url "http://www.eviware.com/repository/maven2/" } // for SoapUI
	}

	dependencies {
		classpath 'org.gradle.api.plugins:gradle-cargo-plugin:0.6'

		// SOAP UI
		classpath ('eviware:maven-soapui-plugin:4.5.1'){
			exclude group: "jtidy", module: "jtidy"
			exclude group: "javax.jms", module: "jms"
		}
		classpath 'net.sf.jtidy:jtidy:r938'               //override the java 1.5 transient dependency
		classpath 'org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1' // replacement for javax.jms
        classpath 'commons-io:commons-io:2.4'
	}
}


repositories {
    maven { url 'http://download.java.net/maven/glassfish/org/glassfish/extras' }
	maven { url "https://code.lds.org/nexus/content/groups/main-repo" } // oracle TODO make this local repo
	maven { url "http://www.datanucleus.org/downloads/maven2" } // datanucleus
	
}


apply plugin: 'war'
apply plugin: 'cargo'
apply plugin: 'jetty'

configurations {
	//Need for enhancering via datanucleus.
	jdo {
		extendsFrom compile
	}
	
	xjc //WTF Is this?? -jer
}
   

dependencies {
	// ************************************* beg cargo *********************************************
	cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
			"org.codehaus.cargo:cargo-ant:$cargoVersion"
	// ************************************* end cargo *********************************************

	// ************************************* beg xjc *********************************************
	xjc group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.2.4-1'
	// ************************************* end xjc *********************************************

	
	
	// DataNucleus JPA
	def dataNucleusVersion="3.2.0-m4" //TODO update
	compile "org.datanucleus:datanucleus-core:${dataNucleusVersion}"
	compile "org.datanucleus:datanucleus-api-jpa:${dataNucleusVersion}"
	compile "org.datanucleus:datanucleus-maven-plugin:3.2.0-m3" //TODO make this use dataNucleusVersion

	jdo  "org.datanucleus:datanucleus-enhancer:3.1.1" //dunno why their's not a more recent version
	
	//H2
	compile "org.datanucleus:datanucleus-rdbms:${dataNucleusVersion}"
	compile "com.h2database:h2:1.3.168"

		
	// geronimo jpa spec
	compile 'org.apache.geronimo.specs:geronimo-jpa_2.0_spec:1.1'

	
	//JAX JDO API
	compile "javax.jdo:jdo-api:3.0"
	
	
	
	//Oracle OJDBC
	compile 'com.oracle:ojdbc6:11.2.0.3'
	compile 'com.oracle:ucp:11.2.0.3'
	
	
	
		
	// for javax.ws.rs.core.Response.Status.EXPECTATION_FAILED
	compile 'javax.ws.rs:javax.ws.rs-api:2.0-m10'
	//providedCompile 'javax:javaee-api:6.0'
	
	// Tomcat
	providedCompile "org.apache.tomcat:tomcat-servlet-api:${tomcatVersion}"
	providedCompile "org.apache.tomcat:tomcat-catalina:${tomcatVersion}"

	
	
	
	
	
	// simple logging facade 4 java
	runtime "org.slf4j:slf4j-api:${slf4jVersion}"
	providedCompile "org.slf4j:log4j-over-slf4j:${slf4jVersion}@jar"
	providedCompile "org.slf4j:jcl-over-slf4j:${slf4jVersion}@jar"
	providedCompile "org.slf4j:jul-to-slf4j:${slf4jVersion}@jar"

	// LOG4J
	compile "org.apache.logging.log4j:log4j-api:${log4JVersion}"
	compile "org.apache.logging.log4j:log4j-core:${log4JVersion}"

	// APACHE COMMONS
	compile 'org.apache.commons:commons-lang3:3.1'
	  compile 'commons-io:commons-io:2.4'
	compile "org.apache.httpcomponents:httpclient:${apacheHttpComponentsVersion}"
	compile "org.apache.httpcomponents:httpmime:${apacheHttpComponentsVersion}"
	compile 'javax.mail:mail:1.4.7'

	// JACKSON 1.9.x (2.x would supplant these w/ different name spaces)
	compile "org.codehaus.jackson:jackson-core-asl:${jacksonVersion}"
	compile "org.codehaus.jackson:jackson-mapper-asl:${jacksonVersion}"
	compile "org.codehaus.jackson:jackson-jaxrs:${jacksonVersion}"
	compile "org.codehaus.jackson:jackson-xc:${jacksonVersion}"
	compile "org.codehaus.jackson:jackson-core-lgpl:${jacksonVersion}"
	compile "org.codehaus.jackson:jackson-mapper-lgpl:${jacksonVersion}"
	compile "org.codehaus.jackson:jackson-smile:${jacksonVersion}"
	compile "org.codehaus.jackson:jackson-mrbean:${jacksonVersion}"
	runtime 'javax.xml.bind:jaxb-api:2.1'

	// APACHE CXF
	compile 'org.apache.cxf:cxf-rt-frontend-jaxrs:2.7.3'



	// SPRING
	runtime 'org.springframework:spring-web:3.2.2.RELEASE'
	runtime 'org.aspectj:aspectjrt:1.6.6'
	runtime 'org.apache.bcel:bcel:5.2'
	
	// NETFLIX KARYON
	compile "com.netflix.karyon:karyon-extensions:${karyonVersion}"
	compile 'javax.validation:validation-api:1.0.0.GA'
	runtime 'com.google.code.gson:gson:2.1'
	runtime 'com.google.guava:guava:11.0.2'
	runtime 'com.google.inject.extensions:guice-servlet:2.0'
	runtime 'com.sun.jersey:jersey-core:1.11'
	runtime 'com.sun.jersey.contribs:jersey-guice:1.8'

	// Testing stuff, hamcrest comes first please.
	testCompile 'org.hamcrest:hamcrest-all:1.3'
	testCompile 'org.easymock:easymock:3.0'
	testCompile 'org.testng:testng:6.8'
}



//war {
//    from('resources')  {
//        include '*.properties'
//        into 'WEB-INF/classes/'
//    }
//    webXml = file('src/main/webapp/WEB-INF/web.xml')
//}


cargo {
	containerId = 'tomcat7x'
	port = new Integer(tomcatHttpPort)
	
	deployable{
		// NOTE: Override file to make it pick up an existing war instead of that produce by running other tasks
		//		file = file('target/contivo-conversion-service-0.0.1.war')
		context = 'jpa-dao-example'

		// wait on this URL before continuing
//WTF????
//        def pingURL = "http://localhost:${tomcatHttpPort}/jaxrs-service/hello/echo/SierraTangoNevada"
	}

    local {
// NOTE: uncomment following line to use existing tomcat install
//        homeDir = file('/Library/Tomcat') // TODO should be set from CATALINA_HOME
        output = file('build/output.log')

//TODO INTALL OUTSIDE OF BUILDDIR... SO CLEAN DOESN'T KILL TOMCAT INSTALL UNLESS EXPLICITLY TOLD TO DO SO.
		 installer {
	            installUrl = "http://apache.osuosl.org/tomcat/tomcat-7/v${tomcatVersion}/bin/apache-tomcat-${tomcatVersion}.zip"
	            downloadDir = file("$buildDir/download") 
	            extractDir = file("$buildDir/extract")
	        }

		tomcat {
			ajpPort = new Integer(tomcatAjpPort)
		}
		 
		if(containerJVMArgs) {
			jvmArgs = "$containerJVMArgs"		
		} else {
			// set contivo paths
			jvmArgs = "-Dcontivo.runtime.classpath=$buildDir/classpath -Dcontivo.runtime.map.root=$buildDir/../src/test/resources/data"

			jvmArgs += "-XX:-UseSplitVerifier" 	//to support byte code injection
		}
		   
		// if containerDebug, append tomcat debug args to jvm args
		if(containerDebug) {
			jvmArgs += " $containerDebugJVMArgs"
		}
		
		logger.info "=====jvmArgs===="
		logger.info "$jvmArgs"

    }
	
}

def classpathRoot = "$buildDir" + File.separator + "classpath"
task makeClasspathRoot {
	def classPathDir = new File(classpathRoot.toString());
	if (!classPathDir.exists()) {
		classPathDir.mkdirs()
	}
}

test {
	jvmArgs "-XX:-UseSplitVerifier" //to support byte code injection
	
	description = 'Just unit tests, out of container'
	
//	include '**/TheTest.class' //example of including/running one test
	include '**/*Test.class'
    useTestNG () {
        if (testIncludeGroups) {
            includeGroups "$testIncludeGroups".split()
        }

        if (testExcludeGroups) {
            excludeGroups "$testExcludeGroups".split()
        }
    }
	
	// Disable the test report for the individual test task
	test {
		testReport = false
	}
	
}

task integrationTest(type: Test, dependsOn: ['test','war']) {
	logger.info 'Integration Tests'
	jvmArgs "-XX:-UseSplitVerifier" //to support byte code injection
	
	useTestNG()
	include '**/*IT.class'

	// set a system property for the test JVM(s)
	systemProperty 'service.url', "http://localhost:${tomcatHttpPort}/jaxrs-service"
	systemProperty 'archaius.deployment.applicationId', 'jaxrs-service'
	systemProperty 'archaius.deployment.environment', 'dev'
	
	ignoreFailures true
	
	doFirst {
		cargoStartLocal.execute()
	}

	doLast {
		if (project.hasProperty('soapuiTest')) {
			soapUiTest.execute()
		}
        
		logger.info 'Stopping Tomcat server'
		cargoStopLocal.execute()
	}
}

//
//	<copy todir="${classes.dir}">
//		<fileset dir="${resources.dir}" includes="**/*.xml"/>
//	</copy>

task copyDAOConfig(type: Copy) {
	from "$projectDir/src/main/resources/"
	into "$buildDir/classes/main"
}

//<target name="enhance" depends="compile,copy.metadata">
//
//	<!-- Define the task enhancer -->
//	<taskdef name="enhancer" classname="org.datanucleus.enhancer.EnhancerTask">
//		<classpath refid="run.classpath"/>
//	</taskdef>
//
//	<!-- Enhance -->
//	<enhancer classpathref="run.classpath" dir="${classes.dir}" verbose="true" api="JPA" persistenceUnit="${Name}">
//		<sysproperty key="log4j.configuration" value="file:log4j.properties"/>
//	</enhancer>
//
//</target>
//
//<!-- Compile properties -->
//<!-- ================== -->
//<property name="classes.dir" value="target/classes"/>
//
//<!-- Classpath for execution -->
//<!-- ======================= -->
//<path id="run.classpath">
//	<fileset dir="${lib.dir}">
//		<include name="**/*.jar"/>
//	</fileset>
//	<pathelement location="${classes.dir}"/>
//	<pathelement location="${basedir}"/>
//</path>
//	

task enhance (dependsOn: copyDAOConfig) << {

	logger.info("......................................................................................................................................................");
	logger.info("......................................................................................................................................................");
	logger.info("......................................................................................................................................................");
	logger.info("......................................................................................................................................................");
	
	ant.taskdef(
		name      : 'datanucleusenhancer',
		classpath : project.runtimeClasspath.asPath,
		classname : 'org.datanucleus.enhancer.EnhancerTask'
	)

	ant.datanucleusenhancer(
		classpath   : project.runtimeClasspath.asPath,
		verbose     : true,
		api : "JPA",
		persistenceUnit : "Hello",
		failonerror : true) {
		fileset( dir : "$buildDir/classes/main" ) {	}
	}
}

classes.dependsOn enhance


//   dependencies {
//	  compile 'org.datanucleus:datanucleus-core:1.1.5',
//			  'javax.jdo:jdo2-api:2.3-eb'
//	   jdo 'org.datanucleus:datanucleus-enhancer:1.1.4'
//	  testCompile 'junit:junit:4.7'
//	   
//   }
   
//   task jdoEnhance << {
//	   ant.taskdef(name: 'enhancer', classname: 'org.datanucleus.enhancer.tools.EnhancerTask', classpath: configurations.jdo.asPath)
//	   ant.enhancer( dir: sourceSets.main.output.classesDir.canonicalPath.toURI().toString(), 
//		   persistenceUnit: "Hello",
//		   verbose: 'true') {
//		   classpath {
//			   pathelement(location: sourceSets.main.output.classesDir.canonicalPath.toURI().toString())
//			   pathelement(path: configurations.jdo.asPath)
//		   }
//		   fileset(dir: sourceSets.main.output.classesDir.canonicalPath.toURI().toString()) {
//			   include(name: '**/*.class')
//		   }
//	   }
//   }
//   
//   classes.dependsOn jdoEnhance

//
//<!-- Copy metadata target -->
//<!-- ==================== -->
//<target name="copy.metadata">
//	<copy todir="${classes.dir}">
//		<fileset dir="${resources.dir}" includes="**/*.xml"/>
//	</copy>
//</target>
//
//<!-- Enhance target -->
//<!-- ============== -->
//<target name="enhance" depends="compile,copy.metadata">
//
//	<!-- Define the task enhancer -->
//	<taskdef name="enhancer" classname="org.datanucleus.enhancer.EnhancerTask">
//		<classpath refid="run.classpath"/>
//	</taskdef>
//
//	<!-- Enhance -->
//	<enhancer classpathref="run.classpath" dir="${classes.dir}" verbose="true" api="JPA" persistenceUnit="${Name}">
//		<sysproperty key="log4j.configuration" value="file:log4j.properties"/>
//	</enhancer>
//	
//</target>


//task soapUiTest(type: JavaExec) {
//	main = 'com.eviware.soapui.tools.SoapUITestCaseRunner'
//	classpath = buildscript.configurations.classpath
//	args '-j', '-a', '-r', '-I', "-f$buildDir/test-results", "$buildDir/../src/test/resources/Conversion-soapui-project.xml"
//	workingDir "$buildDir/test-results"
//	standardOutput new NullOutputStream()
//	errorOutput new NullOutputStream()
//}
//
//jettyRun {
//	httpPort = new Integer(jettyHttpPort)
//	reload = 'automatic'
//	scanIntervalSeconds = new Integer(jettyScanIntervalSeconds)
//	daemon = false
//	doFirst {
//		// use the default port of the ws-backend-simulation module
//		System.setProperty('archaius.deployment.applicationId', 'jaxrs-service')
//		System.setProperty('archaius.deployment.environment', 'dev')
//		System.setProperty('service.url', "http://localhost:${tomcatHttpPort}/jaxrs-service")
//	}
//}
//


